{"version":3,"sources":["src/createWriteStream.js"],"names":[],"mappings":"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","file":"createWriteStream.js","sourcesContent":["import Bigint from '../tools/bigint'\nimport Bluebird from 'bluebird'\nimport {request} from '../tools/smb2-forge'\nimport {Writable} from 'stream'\n\nimport {\n  FILE_OPEN,\n  FILE_OPEN_IF,\n  FILE_OVERWRITE_IF,\n  FILE_CREATE\n} from '../structures/constants'\n\nconst requestAsync = Bluebird.promisify(request)\n\nconst maxPacketSize = new Bigint(8, 0x00010000 - 0x71)\n\nfunction * fibonacci () {\n  let a = 1\n  let b = 2\n\n  for (;;) {\n    const c = a\n    a = b\n    b = c + a\n    yield c\n  }\n}\n\nclass SmbWritableStream extends Writable {\n  constructor (connection, file, options = {}) {\n    super(options)\n\n    const {\n      encoding = 'utf8',\n      start = 0\n    } = options\n\n    this.connection = connection\n    this.encoding = encoding\n    this.file = file\n    this.offset = new Bigint(8, start)\n  }\n\n  async _write (chunk, encoding, next) {\n    encoding = this.encoding || encoding\n    chunk = Buffer.isBuffer(chunk) ? chunk : new Buffer(chunk, encoding)\n\n    while (chunk.length > 0) {\n      const packetSize = Math.min(maxPacketSize.toNumber(), chunk.length)\n      const packet = chunk.slice(0, packetSize)\n      chunk = chunk.slice(packetSize)\n      const offset = new Bigint(this.offset)\n      this.offset = this.offset.add(packetSize)\n\n      const retryInterval = fibonacci()\n      let pending = true\n\n      while (pending) {\n        try {\n          await requestAsync('write', {\n            FileId: this.file.FileId,\n            Offset: offset.toBuffer(),\n            Buffer: packet\n          }, this.connection)\n\n          pending = false\n        } catch (error) {\n          if (error.code === 'STATUS_PENDING') {\n            await new Promise((resolve, reject) => {\n              setTimeout(resolve, retryInterval.next().value)\n            })\n          } else {\n            throw error\n          }\n        }\n      }\n    }\n\n    next()\n  }\n\n  async end (...args) {\n    try {\n      super.end(...args)\n    } finally {\n      await requestAsync('close', this.file, this.connection)\n    }\n  }\n}\n\nexport default function (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  let createDisposition\n  const flags = options && options.flags\n\n  if (flags === 'r') {\n    createDisposition = FILE_OPEN\n  } else if (flags === 'r+') {\n    createDisposition = FILE_OPEN_IF\n  } else if (flags === 'w' || flags === 'w+') {\n    createDisposition = FILE_OVERWRITE_IF\n  } else if (flags === 'wx' || flags === 'w+x') {\n    createDisposition = FILE_CREATE\n  }\n\n  request('create', { path, createDisposition }, this, (err, file) => {\n    if (err) {\n      cb(err)\n    } else {\n      cb(null, new SmbWritableStream(this, file, options))\n    }\n  })\n}\n"]}