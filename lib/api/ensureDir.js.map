{"version":3,"sources":["src/ensureDir.js"],"names":[],"mappings":"yQAAsB,qBAAqB,wBACtB,UAAU,mDAE/B,IAAM,YAAY,CAAG,sBAAS,SAAS,yBAAS,CAAA,AAEhD,IAAM,YAAY,CAAG,SAAf,YAAY,CAAmB,IAAI,CAAE,UAAU,MAE3C,SAAS,6MAAS,YAAY,CAAC,MAAM,CAAE,CAAC,IAAI,CAAJ,IAAI,CAAC,CAAE,UAAU,CAAC,SAA1D,SAAS,yBACX,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,KAAK,UAAU,CAAA,oFACnD,YAAY,CAAC,OAAO,CAAE,SAAS,CAAE,UAAU,CAAC,kDAE5C,IAAI,KAAK,CAAI,IAAI,oCAAiC,iHAGtD,eAAI,IAAI,KAAK,8BAA8B,CAAA,4GAErC,YAAY,CAAC,eAAe,CAAE,CAAC,IAAI,CAAJ,IAAI,CAAC,CAAE,UAAU,CAAC,mHAEnD,eAAI,IAAI,KAAK,8BAA8B,CAAA,kMAQtD,CAAA,qBAEc,oBAAgB,IAAI,CAAE,EAAE,MAC/B,SAAS,CACT,IAAI,CAIA,QAAQ,gIALZ,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAC5B,IAAI,GAAG,EAAE,iCAEN,SAAS,CAAC,MAAM,+BACrB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAA,AACtB,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAC3B,QAAQ,CAAC,MAAM,oIAGd,YAAY,CAAC,QAAQ,CAAE,IAAI,CAAC,6CAEpC,EAAE,CAAC,IAAI,CAAC,CAAA,mGAER,EAAE,gBAAO,CAAA,qEAEZ","file":"ensureDir.js","sourcesContent":["import {request} from '../tools/smb2-forge'\nimport Bluebird from 'bluebird'\n\nconst requestAsync = Bluebird.promisify(request)\n\nconst ensureOneDir = async function (path, connection) {\n  try {\n    const fileOrDir = await requestAsync('open', {path}, connection)\n    if (fileOrDir.FileAttributes.readIntBE(0, 1) === 0x00000010) { // See http://download.microsoft.com/DOWNLOAD/9/5/E/95EF66AF-9026-4BB0-A41D-A4F81802D92C/[MS-FSCC].pdf Section 2.6\n      await requestAsync('close', fileOrDir, connection)\n    } else {\n      throw new Error(`${path} exists but is not a directory`)\n    }\n  } catch (err) {\n    if (err.code === 'STATUS_OBJECT_NAME_NOT_FOUND') {\n      try {\n        await requestAsync('create_folder', {path}, connection)\n      } catch (err) {\n        if (err.code !== 'STATUS_OBJECT_NAME_COLLISION') {\n          throw err\n        }\n      }\n    } else {\n      throw err\n    }\n  }\n}\n\nexport default async function (path, cb) {\n  const structure = path.split('\\\\')\n  const base = []\n  try {\n    while (structure.length) {\n      base.push(structure.shift())\n      const basePath = base.join('\\\\')\n      if (!basePath.length) {\n        continue\n      }\n      await ensureOneDir(basePath, this)\n    }\n    cb(null)\n  } catch (error) {\n    cb(error)\n  }\n}\n"]}